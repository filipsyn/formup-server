// <auto-generated />
using System;
using FormUp.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FormUp.Api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231230171425_MakeUidUnique")]
    partial class MakeUidUnique
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FormUp.Api.Common.Persistence.GeolocationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Geolocations");
                });

            modelBuilder.Entity("FormUp.Api.Features.v1.Exercises.ExerciseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = new Guid("73925319-a217-4c35-aa2f-4e56e9553d85"),
                            CreatedAt = new DateTime(2023, 12, 30, 18, 14, 25, 186, DateTimeKind.Local).AddTicks(4370),
                            ModifiedAt = new DateTime(2023, 12, 30, 18, 14, 25, 186, DateTimeKind.Local).AddTicks(4420),
                            Name = "exercises.pull-ups"
                        },
                        new
                        {
                            Id = new Guid("7f1d02b1-2b42-4c4a-8d28-eaf7c83f7b3e"),
                            CreatedAt = new DateTime(2023, 12, 30, 18, 14, 25, 186, DateTimeKind.Local).AddTicks(4430),
                            ModifiedAt = new DateTime(2023, 12, 30, 18, 14, 25, 186, DateTimeKind.Local).AddTicks(4430),
                            Name = "exercises.push-ups"
                        },
                        new
                        {
                            Id = new Guid("59bba53d-32c4-4c7a-921f-b50244f5671d"),
                            CreatedAt = new DateTime(2023, 12, 30, 18, 14, 25, 186, DateTimeKind.Local).AddTicks(4440),
                            ModifiedAt = new DateTime(2023, 12, 30, 18, 14, 25, 186, DateTimeKind.Local).AddTicks(4440),
                            Name = "exercises.bw-squats"
                        },
                        new
                        {
                            Id = new Guid("0bee513c-3b3f-4b0d-92d2-c35ff19efccf"),
                            CreatedAt = new DateTime(2023, 12, 30, 18, 14, 25, 186, DateTimeKind.Local).AddTicks(4440),
                            ModifiedAt = new DateTime(2023, 12, 30, 18, 14, 25, 186, DateTimeKind.Local).AddTicks(4440),
                            Name = "exercises.dips"
                        });
                });

            modelBuilder.Entity("FormUp.Api.Features.v1.Gyms.GymEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Gyms");
                });

            modelBuilder.Entity("FormUp.Api.Features.v1.Translations.TranslationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Locale", "Key");

                    b.ToTable("Translations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7341f05f-b889-49a9-b0b7-e8b714e06614"),
                            CreatedAt = new DateTime(2023, 12, 30, 18, 14, 25, 186, DateTimeKind.Local).AddTicks(4550),
                            Key = "exercises.pull-ups",
                            Locale = "cs",
                            ModifiedAt = new DateTime(2023, 12, 30, 18, 14, 25, 186, DateTimeKind.Local).AddTicks(4560),
                            Value = "Shyby"
                        },
                        new
                        {
                            Id = new Guid("b5a941a7-53ce-4350-a39f-ee1905a964ad"),
                            CreatedAt = new DateTime(2023, 12, 30, 18, 14, 25, 186, DateTimeKind.Local).AddTicks(4560),
                            Key = "exercises.pull-ups",
                            Locale = "en",
                            ModifiedAt = new DateTime(2023, 12, 30, 18, 14, 25, 186, DateTimeKind.Local).AddTicks(4560),
                            Value = "Pull ups"
                        },
                        new
                        {
                            Id = new Guid("fe6dc787-3c2a-4540-81ed-7c988ebcfa65"),
                            CreatedAt = new DateTime(2023, 12, 30, 18, 14, 25, 186, DateTimeKind.Local).AddTicks(4570),
                            Key = "exercises.dips",
                            Locale = "cs",
                            ModifiedAt = new DateTime(2023, 12, 30, 18, 14, 25, 186, DateTimeKind.Local).AddTicks(4570),
                            Value = "Dipy"
                        },
                        new
                        {
                            Id = new Guid("0b7ec5a5-3dbc-49a4-a9d5-ea66b9d8a54e"),
                            CreatedAt = new DateTime(2023, 12, 30, 18, 14, 25, 186, DateTimeKind.Local).AddTicks(4570),
                            Key = "exercises.dips",
                            Locale = "en",
                            ModifiedAt = new DateTime(2023, 12, 30, 18, 14, 25, 186, DateTimeKind.Local).AddTicks(4570),
                            Value = "Dips"
                        },
                        new
                        {
                            Id = new Guid("ee3ba020-23ce-42a3-936f-1a9d69922e64"),
                            CreatedAt = new DateTime(2023, 12, 30, 18, 14, 25, 186, DateTimeKind.Local).AddTicks(4580),
                            Key = "exercises.bw-squats",
                            Locale = "cs",
                            ModifiedAt = new DateTime(2023, 12, 30, 18, 14, 25, 186, DateTimeKind.Local).AddTicks(4580),
                            Value = "Dřepy s vlastní vahou"
                        },
                        new
                        {
                            Id = new Guid("f7a68c6f-f911-4720-ad1b-24159f4e78b7"),
                            CreatedAt = new DateTime(2023, 12, 30, 18, 14, 25, 186, DateTimeKind.Local).AddTicks(4580),
                            Key = "exercises.bw-squats",
                            Locale = "en",
                            ModifiedAt = new DateTime(2023, 12, 30, 18, 14, 25, 186, DateTimeKind.Local).AddTicks(4580),
                            Value = "Body-weight squats"
                        },
                        new
                        {
                            Id = new Guid("c54cfb99-7be8-4f7e-b139-a0c04abb48e8"),
                            CreatedAt = new DateTime(2023, 12, 30, 18, 14, 25, 186, DateTimeKind.Local).AddTicks(4590),
                            Key = "exercises.push-ups",
                            Locale = "cs",
                            ModifiedAt = new DateTime(2023, 12, 30, 18, 14, 25, 186, DateTimeKind.Local).AddTicks(4590),
                            Value = "Kliky"
                        },
                        new
                        {
                            Id = new Guid("bce2af68-2cc5-43ee-a904-319509a54226"),
                            CreatedAt = new DateTime(2023, 12, 30, 18, 14, 25, 186, DateTimeKind.Local).AddTicks(4590),
                            Key = "exercises.push-ups",
                            Locale = "en",
                            ModifiedAt = new DateTime(2023, 12, 30, 18, 14, 25, 186, DateTimeKind.Local).AddTicks(4590),
                            Value = "Push ups"
                        });
                });

            modelBuilder.Entity("FormUp.Api.Features.v1.Users.HeightLogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("At")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Uid");

                    b.ToTable("Heights");
                });

            modelBuilder.Entity("FormUp.Api.Features.v1.Users.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FormUp.Api.Features.v1.Users.WeightLogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("At")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Uid");

                    b.ToTable("Weights");
                });

            modelBuilder.Entity("FormUp.Api.Features.v1.Workouts.ActivityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RepetitionsCount")
                        .HasColumnType("int");

                    b.Property<int>("SetsCount")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.Property<Guid?>("WorkoutEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("WorkoutEntityId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("FormUp.Api.Features.v1.Workouts.WorkoutEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("At")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("FormUp.Api.Features.v1.Gyms.GymEntity", b =>
                {
                    b.HasOne("FormUp.Api.Common.Persistence.GeolocationEntity", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("FormUp.Api.Features.v1.Workouts.ActivityEntity", b =>
                {
                    b.HasOne("FormUp.Api.Features.v1.Exercises.ExerciseEntity", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormUp.Api.Features.v1.Workouts.WorkoutEntity", null)
                        .WithMany("Activities")
                        .HasForeignKey("WorkoutEntityId");

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("FormUp.Api.Features.v1.Workouts.WorkoutEntity", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
