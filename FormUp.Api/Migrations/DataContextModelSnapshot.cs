// <auto-generated />
using System;
using FormUp.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FormUp.Api.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FormUp.Api.Common.Persistence.GeolocationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Geolocations");
                });

            modelBuilder.Entity("FormUp.Api.Features.v1.Exercises.ExerciseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b9648b00-a160-414e-b090-ca1a2360f420"),
                            CreatedAt = new DateTime(2023, 12, 25, 15, 4, 42, 218, DateTimeKind.Local).AddTicks(8440),
                            ModifiedAt = new DateTime(2023, 12, 25, 15, 4, 42, 218, DateTimeKind.Local).AddTicks(8480),
                            Name = "exercises.pull-ups"
                        },
                        new
                        {
                            Id = new Guid("8a0cb85e-1a38-4d86-b33a-2ad5b3cf685a"),
                            CreatedAt = new DateTime(2023, 12, 25, 15, 4, 42, 218, DateTimeKind.Local).AddTicks(8490),
                            ModifiedAt = new DateTime(2023, 12, 25, 15, 4, 42, 218, DateTimeKind.Local).AddTicks(8490),
                            Name = "exercises.push-ups"
                        },
                        new
                        {
                            Id = new Guid("18701ace-5927-413a-9393-d9550d5c1221"),
                            CreatedAt = new DateTime(2023, 12, 25, 15, 4, 42, 218, DateTimeKind.Local).AddTicks(8490),
                            ModifiedAt = new DateTime(2023, 12, 25, 15, 4, 42, 218, DateTimeKind.Local).AddTicks(8490),
                            Name = "exercises.bw-squats"
                        },
                        new
                        {
                            Id = new Guid("d2bf04e5-4301-49b9-8912-31cf478dc753"),
                            CreatedAt = new DateTime(2023, 12, 25, 15, 4, 42, 218, DateTimeKind.Local).AddTicks(8500),
                            ModifiedAt = new DateTime(2023, 12, 25, 15, 4, 42, 218, DateTimeKind.Local).AddTicks(8500),
                            Name = "exercises.dips"
                        });
                });

            modelBuilder.Entity("FormUp.Api.Features.v1.Gyms.GymEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Gyms");
                });

            modelBuilder.Entity("FormUp.Api.Features.v1.Translations.TranslationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Locale", "Key");

                    b.ToTable("Translations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0043a09c-33c6-4849-aa44-e459da524d47"),
                            CreatedAt = new DateTime(2023, 12, 25, 15, 4, 42, 218, DateTimeKind.Local).AddTicks(8600),
                            Key = "exercises.pull-ups",
                            Locale = "cs",
                            ModifiedAt = new DateTime(2023, 12, 25, 15, 4, 42, 218, DateTimeKind.Local).AddTicks(8600),
                            Value = "Shyby"
                        },
                        new
                        {
                            Id = new Guid("639129eb-9054-4349-b057-be09fa374de4"),
                            CreatedAt = new DateTime(2023, 12, 25, 15, 4, 42, 218, DateTimeKind.Local).AddTicks(8600),
                            Key = "exercises.pull-ups",
                            Locale = "en",
                            ModifiedAt = new DateTime(2023, 12, 25, 15, 4, 42, 218, DateTimeKind.Local).AddTicks(8600),
                            Value = "Pull ups"
                        },
                        new
                        {
                            Id = new Guid("7d2ee132-7a45-4b96-8226-a1254fb706d8"),
                            CreatedAt = new DateTime(2023, 12, 25, 15, 4, 42, 218, DateTimeKind.Local).AddTicks(8610),
                            Key = "exercises.dips",
                            Locale = "cs",
                            ModifiedAt = new DateTime(2023, 12, 25, 15, 4, 42, 218, DateTimeKind.Local).AddTicks(8610),
                            Value = "Dipy"
                        },
                        new
                        {
                            Id = new Guid("c3f44586-b780-46ab-9b75-7e0a9abb48a9"),
                            CreatedAt = new DateTime(2023, 12, 25, 15, 4, 42, 218, DateTimeKind.Local).AddTicks(8610),
                            Key = "exercises.dips",
                            Locale = "en",
                            ModifiedAt = new DateTime(2023, 12, 25, 15, 4, 42, 218, DateTimeKind.Local).AddTicks(8610),
                            Value = "Dips"
                        },
                        new
                        {
                            Id = new Guid("eeb0ee76-ea2f-4030-910b-1c9383a90d4b"),
                            CreatedAt = new DateTime(2023, 12, 25, 15, 4, 42, 218, DateTimeKind.Local).AddTicks(8620),
                            Key = "exercises.bw-squats",
                            Locale = "cs",
                            ModifiedAt = new DateTime(2023, 12, 25, 15, 4, 42, 218, DateTimeKind.Local).AddTicks(8620),
                            Value = "Dřepy s vlastní vahou"
                        },
                        new
                        {
                            Id = new Guid("cfc6c877-8087-4751-841a-300fdc7bea99"),
                            CreatedAt = new DateTime(2023, 12, 25, 15, 4, 42, 218, DateTimeKind.Local).AddTicks(8620),
                            Key = "exercises.bw-squats",
                            Locale = "en",
                            ModifiedAt = new DateTime(2023, 12, 25, 15, 4, 42, 218, DateTimeKind.Local).AddTicks(8630),
                            Value = "Body-weight squats"
                        },
                        new
                        {
                            Id = new Guid("b02ae724-3a74-4512-af82-839b3788cebc"),
                            CreatedAt = new DateTime(2023, 12, 25, 15, 4, 42, 218, DateTimeKind.Local).AddTicks(8630),
                            Key = "exercises.push-ups",
                            Locale = "cs",
                            ModifiedAt = new DateTime(2023, 12, 25, 15, 4, 42, 218, DateTimeKind.Local).AddTicks(8630),
                            Value = "Kliky"
                        },
                        new
                        {
                            Id = new Guid("58a29f76-2cb2-43b2-873b-a9a0b4d8d1d6"),
                            CreatedAt = new DateTime(2023, 12, 25, 15, 4, 42, 218, DateTimeKind.Local).AddTicks(8630),
                            Key = "exercises.push-ups",
                            Locale = "en",
                            ModifiedAt = new DateTime(2023, 12, 25, 15, 4, 42, 218, DateTimeKind.Local).AddTicks(8630),
                            Value = "Push ups"
                        });
                });

            modelBuilder.Entity("FormUp.Api.Features.v1.Workouts.ActivityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RepetitionsCount")
                        .HasColumnType("int");

                    b.Property<int>("SetsCount")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.Property<Guid?>("WorkoutEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("WorkoutEntityId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("FormUp.Api.Features.v1.Workouts.WorkoutEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("At")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("FormUp.Api.Features.v1.Gyms.GymEntity", b =>
                {
                    b.HasOne("FormUp.Api.Common.Persistence.GeolocationEntity", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("FormUp.Api.Features.v1.Workouts.ActivityEntity", b =>
                {
                    b.HasOne("FormUp.Api.Features.v1.Exercises.ExerciseEntity", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormUp.Api.Features.v1.Workouts.WorkoutEntity", null)
                        .WithMany("Activities")
                        .HasForeignKey("WorkoutEntityId");

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("FormUp.Api.Features.v1.Workouts.WorkoutEntity", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
